service: backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-2

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: travel 
          method: get 
  createRequest:
    handler: handler.createRequest
    timeout: 60
    environment:
      REQUEST_TABLE : !Ref RequestTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt RequestTable.Arn
    events:
      - http:
          path: travel 
          method: post 
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false

  postTest:
    handler: handler.postTest
    timeout: 60
    events:
      - http:
          path: test 
          method: post 
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false


  updateRequest:
    handler: handler.updateRequest
    timeout: 60
    environment:
      REQUEST_TABLE : !Ref RequestTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt RequestTable.Arn
    events:
      - http:
          path: travel/{id}
          method: put 

plugins:
  - serverless-iam-roles-per-function

resources:
 Resources:
  RequestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RequestTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: requestId 
          AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH